
BCM_TASK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001df0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001df0  00001e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  00800090  00800090  00001eb4  2**0
                  ALLOC
  3 .stab         000032e8  00000000  00000000  00001eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002daf  00000000  00000000  0000519c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000808b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000081fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000badc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <main>
      8a:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <bcm_init>:
 * Parameter [1]	: ptr_str_instance_t --> address of structer instance
 * return			: enu_system_status_t
 */

enu_system_status_t bcm_init(str_bcm_instance_t* ptr_str_instance_t)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <bcm_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <bcm_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	enu_system_status_t enu_system_status = BCM_OK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01

	if (ptr_str_instance_t->enu_communication_sel == BCM_UART)
     b5a:	ea 81       	ldd	r30, Y+2	; 0x02
     b5c:	fb 81       	ldd	r31, Y+3	; 0x03
     b5e:	80 81       	ld	r24, Z
     b60:	88 23       	and	r24, r24
     b62:	09 f5       	brne	.+66     	; 0xba6 <bcm_init+0x60>
	{
		enu_system_status = HUART_enInit(BCM_UART_BAUDRATE, ptr_str_instance_t->enu_tx_rx_state);
     b64:	ea 81       	ldd	r30, Y+2	; 0x02
     b66:	fb 81       	ldd	r31, Y+3	; 0x03
     b68:	21 81       	ldd	r18, Z+1	; 0x01
     b6a:	60 e8       	ldi	r22, 0x80	; 128
     b6c:	75 e2       	ldi	r23, 0x25	; 37
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	42 2f       	mov	r20, r18
     b74:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HUART_enInit>
     b78:	89 83       	std	Y+1, r24	; 0x01
		if (ptr_str_instance_t->enu_tx_rx_state == BCM_RX || ptr_str_instance_t->enu_tx_rx_state == BCM_TX_RX)
     b7a:	ea 81       	ldd	r30, Y+2	; 0x02
     b7c:	fb 81       	ldd	r31, Y+3	; 0x03
     b7e:	81 81       	ldd	r24, Z+1	; 0x01
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	29 f0       	breq	.+10     	; 0xb8e <bcm_init+0x48>
     b84:	ea 81       	ldd	r30, Y+2	; 0x02
     b86:	fb 81       	ldd	r31, Y+3	; 0x03
     b88:	81 81       	ldd	r24, Z+1	; 0x01
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	31 f4       	brne	.+12     	; 0xb9a <bcm_init+0x54>
		{
			HUART_receiveAsyncString(u16_RX_BufferSize);
     b8e:	80 91 71 00 	lds	r24, 0x0071
     b92:	90 91 72 00 	lds	r25, 0x0072
     b96:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HUART_receiveAsyncString>
		}
		(void) HUART_enEnableInterrupt(ptr_str_instance_t->enu_tx_rx_state);
     b9a:	ea 81       	ldd	r30, Y+2	; 0x02
     b9c:	fb 81       	ldd	r31, Y+3	; 0x03
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <HUART_enEnableInterrupt>
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <bcm_init+0x66>
	}
	else if (ptr_str_instance_t->enu_communication_sel == BCM_SPI)
     ba6:	ea 81       	ldd	r30, Y+2	; 0x02
     ba8:	fb 81       	ldd	r31, Y+3	; 0x03
     baa:	80 81       	ld	r24, Z
	else
	{
		/* Do nothing */
	}

	return enu_system_status;
     bac:	89 81       	ldd	r24, Y+1	; 0x01
}
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <bcm_deinit>:
 * Parameter [1]	: ptr_str_instance_t --> address of structer instance
 * return			: enu_system_status_t
 */

enu_system_status_t bcm_deinit(str_bcm_instance_t* ptr_str_instance_t)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <bcm_deinit+0x6>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <bcm_deinit+0x8>
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	9b 83       	std	Y+3, r25	; 0x03
     bca:	8a 83       	std	Y+2, r24	; 0x02
	enu_system_status_t enu_system_status = BCM_OK;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	89 83       	std	Y+1, r24	; 0x01

	if (ptr_str_instance_t->enu_communication_sel == BCM_UART)
     bd0:	ea 81       	ldd	r30, Y+2	; 0x02
     bd2:	fb 81       	ldd	r31, Y+3	; 0x03
     bd4:	80 81       	ld	r24, Z
     bd6:	88 23       	and	r24, r24
     bd8:	39 f4       	brne	.+14     	; 0xbe8 <bcm_deinit+0x2c>
	{
		enu_system_status = HUART_enDeInit(ptr_str_instance_t->enu_tx_rx_state);
     bda:	ea 81       	ldd	r30, Y+2	; 0x02
     bdc:	fb 81       	ldd	r31, Y+3	; 0x03
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <HUART_enDeInit>
     be4:	89 83       	std	Y+1, r24	; 0x01
     be6:	03 c0       	rjmp	.+6      	; 0xbee <bcm_deinit+0x32>

	}
	else if (ptr_str_instance_t->enu_communication_sel == BCM_SPI)
     be8:	ea 81       	ldd	r30, Y+2	; 0x02
     bea:	fb 81       	ldd	r31, Y+3	; 0x03
     bec:	80 81       	ld	r24, Z
	else
	{
		/* Do nothing */
	}

	return enu_system_status;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <bcm_send>:
 * Parameter [1]	: ptr_str_instance_t --> address of structer instance
 * Parameter [2] 	: u8_one_byte_data 	 --> variable of uint8
 * return			: enu_system_status_t
 */
enu_system_status_t bcm_send(str_bcm_instance_t* ptr_str_instance_t, Uint8_t u8_one_byte_data)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <bcm_send+0x6>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <bcm_send+0x8>
     c06:	0f 92       	push	r0
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	9b 83       	std	Y+3, r25	; 0x03
     c0e:	8a 83       	std	Y+2, r24	; 0x02
     c10:	6c 83       	std	Y+4, r22	; 0x04
	enu_system_status_t bcm_error_status = BCM_OK;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	89 83       	std	Y+1, r24	; 0x01

	if (ptr_str_instance_t->enu_communication_sel ==BCM_UART )
     c16:	ea 81       	ldd	r30, Y+2	; 0x02
     c18:	fb 81       	ldd	r31, Y+3	; 0x03
     c1a:	80 81       	ld	r24, Z
     c1c:	88 23       	and	r24, r24
     c1e:	29 f4       	brne	.+10     	; 0xc2a <bcm_send+0x2c>
	{
		bcm_error_status = HUART_enAsyncSendData(u8_one_byte_data);
     c20:	8c 81       	ldd	r24, Y+4	; 0x04
     c22:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <HUART_enAsyncSendData>
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <bcm_send+0x32>
	}
	else if (ptr_str_instance_t->enu_communication_sel == BCM_SPI)
     c2a:	ea 81       	ldd	r30, Y+2	; 0x02
     c2c:	fb 81       	ldd	r31, Y+3	; 0x03
     c2e:	80 81       	ld	r24, Z
	else
	{
		/* Do nothing */
	}

	return bcm_error_status;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <bcm_send_n>:
 * Parameter [2] 	: ptr_u8_n_byte_data 	 --> Address of array or string to be sent
 * Parameter [3] 	: u16_byte_length	 	 --> Buffer size of uint16
 * return			: enu_system_status_t
 */
enu_system_status_t bcm_send_n(str_bcm_instance_t* ptr_str_instance_t, Uint8_t* ptr_u8_n_byte_data, Uint16_t u16_byte_length)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	28 97       	sbiw	r28, 0x08	; 8
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	9b 83       	std	Y+3, r25	; 0x03
     c58:	8a 83       	std	Y+2, r24	; 0x02
     c5a:	7d 83       	std	Y+5, r23	; 0x05
     c5c:	6c 83       	std	Y+4, r22	; 0x04
     c5e:	5f 83       	std	Y+7, r21	; 0x07
     c60:	4e 83       	std	Y+6, r20	; 0x06
	enu_system_status_t bcm_error_status = BCM_OK;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	89 83       	std	Y+1, r24	; 0x01

	if (ptr_str_instance_t->enu_communication_sel ==BCM_UART )
     c66:	ea 81       	ldd	r30, Y+2	; 0x02
     c68:	fb 81       	ldd	r31, Y+3	; 0x03
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	41 f4       	brne	.+16     	; 0xc80 <bcm_send_n+0x3e>
	{
		HUART_sendAsyncString(ptr_u8_n_byte_data, u16_byte_length);
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	2e 81       	ldd	r18, Y+6	; 0x06
     c76:	3f 81       	ldd	r19, Y+7	; 0x07
     c78:	b9 01       	movw	r22, r18
     c7a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <HUART_sendAsyncString>
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <bcm_send_n+0x44>
	}
	else if (ptr_str_instance_t->enu_communication_sel == BCM_SPI)
     c80:	ea 81       	ldd	r30, Y+2	; 0x02
     c82:	fb 81       	ldd	r31, Y+3	; 0x03
     c84:	80 81       	ld	r24, Z
	{
		/* Do nothing */
	}


	return bcm_error_status;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
}
     c88:	28 96       	adiw	r28, 0x08	; 8
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <bcm_dispatcher>:
 * Description		: is periodic function and notifies the user with neede event
 * Parameter [1]	: ptr_str_instance_t --> address of structer instance
 * return			: enu_system_status_t
 */
enu_system_status_t bcm_dispatcher(str_bcm_instance_t* ptr_str_instance_t)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	62 97       	sbiw	r28, 0x12	; 18
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	99 8b       	std	Y+17, r25	; 0x11
     cb0:	88 8b       	std	Y+16, r24	; 0x10
	enu_system_status_t bcm_error_status = BCM_OK;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8f 87       	std	Y+15, r24	; 0x0f

	if (ptr_str_instance_t->enu_communication_sel == BCM_UART )
     cb6:	e8 89       	ldd	r30, Y+16	; 0x10
     cb8:	f9 89       	ldd	r31, Y+17	; 0x11
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <bcm_dispatcher+0x28>
     cc0:	87 c0       	rjmp	.+270    	; 0xdd0 <bcm_dispatcher+0x136>
	{
		if (gvu8_txComplete == 1)
     cc2:	80 91 99 00 	lds	r24, 0x0099
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	31 f4       	brne	.+12     	; 0xcd6 <bcm_dispatcher+0x3c>
		{
			gvu8_txComplete = 0;
     cca:	10 92 99 00 	sts	0x0099, r1
			HLed_toggle(DIO_PIND_6);
     cce:	8e e1       	ldi	r24, 0x1E	; 30
     cd0:	0e 94 42 0c 	call	0x1884	; 0x1884 <HLed_toggle>
     cd4:	80 c0       	rjmp	.+256    	; 0xdd6 <bcm_dispatcher+0x13c>
		}
		else if(gvu8_rxComplete == 1)
     cd6:	80 91 9a 00 	lds	r24, 0x009A
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <bcm_dispatcher+0x46>
     cde:	7b c0       	rjmp	.+246    	; 0xdd6 <bcm_dispatcher+0x13c>
		{
			gvu8_rxComplete = 0;
     ce0:	10 92 9a 00 	sts	0x009A, r1
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	aa e7       	ldi	r26, 0x7A	; 122
     cea:	b4 e4       	ldi	r27, 0x44	; 68
     cec:	8b 87       	std	Y+11, r24	; 0x0b
     cee:	9c 87       	std	Y+12, r25	; 0x0c
     cf0:	ad 87       	std	Y+13, r26	; 0x0d
     cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	4a ef       	ldi	r20, 0xFA	; 250
     d02:	54 e4       	ldi	r21, 0x44	; 68
     d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	8f 83       	std	Y+7, r24	; 0x07
     d0e:	98 87       	std	Y+8, r25	; 0x08
     d10:	a9 87       	std	Y+9, r26	; 0x09
     d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d14:	6f 81       	ldd	r22, Y+7	; 0x07
     d16:	78 85       	ldd	r23, Y+8	; 0x08
     d18:	89 85       	ldd	r24, Y+9	; 0x09
     d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e8       	ldi	r20, 0x80	; 128
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d28:	88 23       	and	r24, r24
     d2a:	2c f4       	brge	.+10     	; 0xd36 <bcm_dispatcher+0x9c>
		__ticks = 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	9e 83       	std	Y+6, r25	; 0x06
     d32:	8d 83       	std	Y+5, r24	; 0x05
     d34:	3f c0       	rjmp	.+126    	; 0xdb4 <bcm_dispatcher+0x11a>
	else if (__tmp > 65535)
     d36:	6f 81       	ldd	r22, Y+7	; 0x07
     d38:	78 85       	ldd	r23, Y+8	; 0x08
     d3a:	89 85       	ldd	r24, Y+9	; 0x09
     d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	3f ef       	ldi	r19, 0xFF	; 255
     d42:	4f e7       	ldi	r20, 0x7F	; 127
     d44:	57 e4       	ldi	r21, 0x47	; 71
     d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d4a:	18 16       	cp	r1, r24
     d4c:	4c f5       	brge	.+82     	; 0xda0 <bcm_dispatcher+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d50:	7c 85       	ldd	r23, Y+12	; 0x0c
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e2       	ldi	r20, 0x20	; 32
     d5c:	51 e4       	ldi	r21, 0x41	; 65
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
     d76:	0f c0       	rjmp	.+30     	; 0xd96 <bcm_dispatcher+0xfc>
     d78:	88 ec       	ldi	r24, 0xC8	; 200
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9c 83       	std	Y+4, r25	; 0x04
     d7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <bcm_dispatcher+0xea>
     d88:	9c 83       	std	Y+4, r25	; 0x04
     d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05
     d8e:	9e 81       	ldd	r25, Y+6	; 0x06
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	9e 83       	std	Y+6, r25	; 0x06
     d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	69 f7       	brne	.-38     	; 0xd78 <bcm_dispatcher+0xde>
     d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <bcm_dispatcher+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	9e 83       	std	Y+6, r25	; 0x06
     db2:	8d 83       	std	Y+5, r24	; 0x05
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <bcm_dispatcher+0x126>
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			HLed_toggle(DIO_PIND_7);
     dc8:	8f e1       	ldi	r24, 0x1F	; 31
     dca:	0e 94 42 0c 	call	0x1884	; 0x1884 <HLed_toggle>
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <bcm_dispatcher+0x13c>
		{

		}

	}
	else if (ptr_str_instance_t->enu_communication_sel == BCM_SPI)
     dd0:	e8 89       	ldd	r30, Y+16	; 0x10
     dd2:	f9 89       	ldd	r31, Y+17	; 0x11
     dd4:	80 81       	ld	r24, Z
	}
	else
	{
		/* Do nothing */
	}
	return bcm_error_status;
     dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     dd8:	62 96       	adiw	r28, 0x12	; 18
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <MUART_enInit>:

/********************************************************************************************************/
/*									Function Implementation			     								*/
/********************************************************************************************************/
en_uartErrStat_t MUART_enInit(Uint32_t copy_u32BaudRate)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	28 97       	sbiw	r28, 0x08	; 8
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	6d 83       	std	Y+5, r22	; 0x05
     e00:	7e 83       	std	Y+6, r23	; 0x06
     e02:	8f 83       	std	Y+7, r24	; 0x07
     e04:	98 87       	std	Y+8, r25	; 0x08
	Uint8_t local_u8BitMask;
	en_uartErrStat_t local_enErrorStatus = MUART_OK;
     e06:	1b 82       	std	Y+3, r1	; 0x03
	Uint16_t local_u16UBRRReg ;

	if(copy_u32BaudRate >= 2400 && copy_u32BaudRate <= 250000)
     e08:	8d 81       	ldd	r24, Y+5	; 0x05
     e0a:	9e 81       	ldd	r25, Y+6	; 0x06
     e0c:	af 81       	ldd	r26, Y+7	; 0x07
     e0e:	b8 85       	ldd	r27, Y+8	; 0x08
     e10:	80 36       	cpi	r24, 0x60	; 96
     e12:	29 e0       	ldi	r18, 0x09	; 9
     e14:	92 07       	cpc	r25, r18
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	a2 07       	cpc	r26, r18
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	b2 07       	cpc	r27, r18
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <MUART_enInit+0x38>
     e20:	a5 c0       	rjmp	.+330    	; 0xf6c <MUART_enInit+0x182>
     e22:	8d 81       	ldd	r24, Y+5	; 0x05
     e24:	9e 81       	ldd	r25, Y+6	; 0x06
     e26:	af 81       	ldd	r26, Y+7	; 0x07
     e28:	b8 85       	ldd	r27, Y+8	; 0x08
     e2a:	81 39       	cpi	r24, 0x91	; 145
     e2c:	20 ed       	ldi	r18, 0xD0	; 208
     e2e:	92 07       	cpc	r25, r18
     e30:	23 e0       	ldi	r18, 0x03	; 3
     e32:	a2 07       	cpc	r26, r18
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	b2 07       	cpc	r27, r18
     e38:	08 f0       	brcs	.+2      	; 0xe3c <MUART_enInit+0x52>
     e3a:	98 c0       	rjmp	.+304    	; 0xf6c <MUART_enInit+0x182>

		/******************************** Set UART speed and setting Baudrate **************************/

#if MUART_SPEED_TYPE == MUART_SINGLE_SPEED

		ClrBit(UCSRA_REG, U2X);
     e3c:	ab e2       	ldi	r26, 0x2B	; 43
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e2       	ldi	r30, 0x2B	; 43
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8b 7f       	andi	r24, 0xFB	; 251
     e48:	8c 93       	st	X, r24
		local_u16UBRRReg = ((F_CPU / (16*copy_u32BaudRate)) - 1);
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	af 81       	ldd	r26, Y+7	; 0x07
     e50:	b8 85       	ldd	r27, Y+8	; 0x08
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	aa 1f       	adc	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	aa 1f       	adc	r26, r26
     e68:	bb 1f       	adc	r27, r27
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	9c 01       	movw	r18, r24
     e74:	ad 01       	movw	r20, r26
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	92 e1       	ldi	r25, 0x12	; 18
     e7a:	aa e7       	ldi	r26, 0x7A	; 122
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__udivmodsi4>
     e86:	da 01       	movw	r26, r20
     e88:	c9 01       	movw	r24, r18
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
		UBRRL_REG = (Uint8_t)local_u16UBRRReg;
     e90:	e9 e2       	ldi	r30, 0x29	; 41
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	80 83       	st	Z, r24
		UBRRH_REG = (Uint8_t)((0 << URSEL) | (local_u16UBRRReg >> 8) );
     e98:	e0 e4       	ldi	r30, 0x40	; 64
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	89 2f       	mov	r24, r25
     ea2:	99 27       	eor	r25, r25
     ea4:	80 83       	st	Z, r24
//#else
//#error "MUART_TX_RX_INVALID"
//#endif

		/******************************** Selecting Parity type **************************/
		UCSRC_REG &= 0b11001111;
     ea6:	a0 e4       	ldi	r26, 0x40	; 64
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7c       	andi	r24, 0xCF	; 207
     eb2:	8c 93       	st	X, r24
		UCSRC_REG |= (1 << URSEL) | (uartInfo.enParityType << 4);
     eb4:	a0 e4       	ldi	r26, 0x40	; 64
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e0 e4       	ldi	r30, 0x40	; 64
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	28 2f       	mov	r18, r24
     ec0:	80 91 73 00 	lds	r24, 0x0073
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	82 95       	swap	r24
     eca:	92 95       	swap	r25
     ecc:	90 7f       	andi	r25, 0xF0	; 240
     ece:	98 27       	eor	r25, r24
     ed0:	80 7f       	andi	r24, 0xF0	; 240
     ed2:	98 27       	eor	r25, r24
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	82 2b       	or	r24, r18
     ed8:	8c 93       	st	X, r24


		/********************** Selecting Data Length ************************************/
		UCSRC_REG &= 0b11111001;
     eda:	a0 e4       	ldi	r26, 0x40	; 64
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e0 e4       	ldi	r30, 0x40	; 64
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	89 7f       	andi	r24, 0xF9	; 249
     ee6:	8c 93       	st	X, r24
		local_u8BitMask = (0b00000011 | uartInfo.enDataLength);
     ee8:	80 91 74 00 	lds	r24, 0x0074
     eec:	83 60       	ori	r24, 0x03	; 3
     eee:	8c 83       	std	Y+4, r24	; 0x04
		UCSRC_REG |= (1 << URSEL) | (1 << local_u8BitMask);
     ef0:	a0 e4       	ldi	r26, 0x40	; 64
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e0 e4       	ldi	r30, 0x40	; 64
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <MUART_enInit+0x122>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	2a 95       	dec	r18
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <MUART_enInit+0x11e>
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	84 2b       	or	r24, r20
     f14:	8c 93       	st	X, r24
		local_u8BitMask = ( (0b00000100 | uartInfo.enDataLength) >> 2);
     f16:	80 91 74 00 	lds	r24, 0x0074
     f1a:	84 60       	ori	r24, 0x04	; 4
     f1c:	86 95       	lsr	r24
     f1e:	86 95       	lsr	r24
     f20:	8c 83       	std	Y+4, r24	; 0x04
		UCSRB_REG &= 0b11111011;
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8b 7f       	andi	r24, 0xFB	; 251
     f2e:	8c 93       	st	X, r24
		UCSRB_REG |= (local_u8BitMask << 2);
     f30:	aa e2       	ldi	r26, 0x2A	; 42
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e2       	ldi	r30, 0x2A	; 42
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	28 2f       	mov	r18, r24
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	82 2b       	or	r24, r18
     f4c:	8c 93       	st	X, r24

		/********************** Selecting Stop bit mode ************************************/
#if MUART_STOP_BIT == MUART_1_STOP_BIT

		ClrBit(UCSRC_REG, RUSBS);
     f4e:	a0 e4       	ldi	r26, 0x40	; 64
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	8c 93       	st	X, r24

		SetBit(UCSRC_REG, RUSBS);
#endif

		/********************** Asynchronous mode  ************************************/
		ClrBit(UCSRC_REG, UMSEL);
     f5c:	a0 e4       	ldi	r26, 0x40	; 64
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e0 e4       	ldi	r30, 0x40	; 64
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8f 7b       	andi	r24, 0xBF	; 191
     f68:	8c 93       	st	X, r24
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <MUART_enInit+0x186>


	}else
	{
		local_enErrorStatus = MUART_NOK;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return local_enErrorStatus;
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f72:	28 96       	adiw	r28, 0x08	; 8
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <MUART_en_TX_Enable>:
 * Description	: Transmitter is enabled
 * in[1]		: void
 * Return		: void
 */
void MUART_en_TX_Enable(void)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB_REG, TXEN);
     f8c:	aa e2       	ldi	r26, 0x2A	; 42
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ea e2       	ldi	r30, 0x2A	; 42
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 60       	ori	r24, 0x08	; 8
     f98:	8c 93       	st	X, r24
}
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <MUART_en_RX_Enable>:
 * Description	: Receiver is enabled
 * in[1]		: void
 * Return		: void
 */
void MUART_en_RX_Enable(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB_REG, RXEN);
     fa8:	aa e2       	ldi	r26, 0x2A	; 42
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e2       	ldi	r30, 0x2A	; 42
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 61       	ori	r24, 0x10	; 16
     fb4:	8c 93       	st	X, r24
}
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <MUART_en_TX_Disable>:
 * Description	: transmitter is disabled
 * in[1]		: void
 * Return		: void
 */
void MUART_en_TX_Disable(void)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	ClrBit(UCSRB_REG, TXEN);
     fc4:	aa e2       	ldi	r26, 0x2A	; 42
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ea e2       	ldi	r30, 0x2A	; 42
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	87 7f       	andi	r24, 0xF7	; 247
     fd0:	8c 93       	st	X, r24
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <MUART_en_RX_Disable>:
 * Description	: Receiver is disabled
 * in[1]		: void
 * Return		: void
 */
void MUART_en_RX_Disable(void)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	ClrBit(UCSRB_REG, RXEN);
     fe0:	aa e2       	ldi	r26, 0x2A	; 42
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ea e2       	ldi	r30, 0x2A	; 42
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7e       	andi	r24, 0xEF	; 239
     fec:	8c 93       	st	X, r24
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <MUART_en_TX_RX_Enable>:
 * Description	: UART Initialization
 * in[1]		: void
 * Return		: void
 */
void MUART_en_TX_RX_Enable(void)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB_REG, TXEN);
     ffc:	aa e2       	ldi	r26, 0x2A	; 42
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ea e2       	ldi	r30, 0x2A	; 42
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 60       	ori	r24, 0x08	; 8
    1008:	8c 93       	st	X, r24
	SetBit(UCSRB_REG, RXEN);
    100a:	aa e2       	ldi	r26, 0x2A	; 42
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ea e2       	ldi	r30, 0x2A	; 42
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 61       	ori	r24, 0x10	; 16
    1016:	8c 93       	st	X, r24
}
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <MUART_en_TX_RX_Disable>:
 * Description	: Receiver and transmitter are disabled
 * in[1]		: void
 * Return		: void
 */
void MUART_en_TX_RX_Disable(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	ClrBit(UCSRB_REG, TXEN);
    1026:	aa e2       	ldi	r26, 0x2A	; 42
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ea e2       	ldi	r30, 0x2A	; 42
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	87 7f       	andi	r24, 0xF7	; 247
    1032:	8c 93       	st	X, r24
	ClrBit(UCSRB_REG, RXEN);
    1034:	aa e2       	ldi	r26, 0x2A	; 42
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ea e2       	ldi	r30, 0x2A	; 42
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8f 7e       	andi	r24, 0xEF	; 239
    1040:	8c 93       	st	X, r24
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <MUART_enSyncSendData>:


en_uartErrStat_t MUART_enSyncSendData(Uint8_t Copy_u8Data)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <MUART_enSyncSendData+0x6>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	8a 83       	std	Y+2, r24	; 0x02
	en_uartErrStat_t local_enErrorStatus = MUART_OK;
    1054:	19 82       	std	Y+1, r1	; 0x01

//	if (Copy_u8Data != 0)
//	{
		while( !(GetBit(UCSRA_REG, UDRE)) );
    1056:	eb e2       	ldi	r30, 0x2B	; 43
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	82 95       	swap	r24
    105e:	86 95       	lsr	r24
    1060:	87 70       	andi	r24, 0x07	; 7
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	81 70       	andi	r24, 0x01	; 1
    1068:	90 70       	andi	r25, 0x00	; 0
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	a1 f3       	breq	.-24     	; 0x1056 <MUART_enSyncSendData+0xe>
		UDR_REG = Copy_u8Data;
    106e:	ec e2       	ldi	r30, 0x2C	; 44
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	80 83       	st	Z, r24
		while( !(GetBit(UCSRA_REG, TXC)) );
    1076:	eb e2       	ldi	r30, 0x2B	; 43
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	82 95       	swap	r24
    107e:	86 95       	lsr	r24
    1080:	86 95       	lsr	r24
    1082:	83 70       	andi	r24, 0x03	; 3
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	90 70       	andi	r25, 0x00	; 0
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	99 f3       	breq	.-26     	; 0x1076 <MUART_enSyncSendData+0x2e>

//	}else
//	{
//		local_enErrorStatus = MUART_NOK;
//	}
	return local_enErrorStatus;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <MUART_enAsyncSendData>:
 * Description	: UART transmit data to receiver (Asynchronous function)
 * in[1]		: Copy_u8Data (Data to be sent)
 * Return		: en_uartErrStat_t {MUART_OK, MUART_NOK}
 */
en_uartErrStat_t MUART_enAsyncSendData(Uint8_t Copy_u8Data)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <MUART_enAsyncSendData+0x6>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	8a 83       	std	Y+2, r24	; 0x02
	en_uartErrStat_t local_enErrorStatus = MUART_OK;
    10a8:	19 82       	std	Y+1, r1	; 0x01
	g_u16_char_size = 0;
    10aa:	10 92 95 00 	sts	0x0095, r1
    10ae:	10 92 94 00 	sts	0x0094, r1
	UDR_REG = Copy_u8Data;
    10b2:	ec e2       	ldi	r30, 0x2C	; 44
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	80 83       	st	Z, r24

	return local_enErrorStatus;
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <MUART_enEnableInterrupt>:
 * Description	: UART transmit data to receiver (Asynchronous function)
 * in[1]		: Copy_u8Data (Data to be sent)
 * Return		: en_uartErrStat_t {MUART_OK, MUART_NOK}
 */
en_uartErrStat_t MUART_enEnableInterrupt(en_muart_interrupt_t en_muart_interrupt)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <MUART_enEnableInterrupt+0x6>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	8a 83       	std	Y+2, r24	; 0x02
	en_uartErrStat_t errorStat = MUART_OK;
    10d2:	19 82       	std	Y+1, r1	; 0x01
	if (en_muart_interrupt < MUART_INTERRUPT_INVALID)
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	a0 f4       	brcc	.+40     	; 0x1102 <MUART_enEnableInterrupt+0x3c>
	{
		SetBit(UCSRB_REG, en_muart_interrupt);
    10da:	aa e2       	ldi	r26, 0x2A	; 42
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ea e2       	ldi	r30, 0x2A	; 42
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <MUART_enEnableInterrupt+0x32>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <MUART_enEnableInterrupt+0x2e>
    10fc:	84 2b       	or	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <MUART_enEnableInterrupt+0x40>
//		SetBit(UCSRA_REG, en_muart_interrupt);
	}
	else
	{
		errorStat = MUART_NOK;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStat;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <MUART_enDisableInterrupt>:
 * Description	: UART transmit data to receiver (Asynchronous function)
 * in[1]		: Copy_u8Data (Data to be sent)
 * Return		: en_uartErrStat_t {MUART_OK, MUART_NOK}
 */
en_uartErrStat_t MUART_enDisableInterrupt(en_muart_interrupt_t en_muart_interrupt)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <MUART_enDisableInterrupt+0x6>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	8a 83       	std	Y+2, r24	; 0x02
	en_uartErrStat_t errorStat = MUART_OK;
    111e:	19 82       	std	Y+1, r1	; 0x01
	if (en_muart_interrupt < MUART_INTERRUPT_INVALID)
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	88 30       	cpi	r24, 0x08	; 8
    1124:	a8 f4       	brcc	.+42     	; 0x1150 <MUART_enDisableInterrupt+0x3e>
	{
		ClrBit(UCSRB_REG, en_muart_interrupt);
    1126:	aa e2       	ldi	r26, 0x2A	; 42
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ea e2       	ldi	r30, 0x2A	; 42
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <MUART_enDisableInterrupt+0x32>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <MUART_enDisableInterrupt+0x2e>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <MUART_enDisableInterrupt+0x42>
	}
	else
	{
		errorStat = MUART_NOK;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStat;
    1154:	89 81       	ldd	r24, Y+1	; 0x01
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <MUART_enRecieveData>:



en_uartErrStat_t MUART_enRecieveData(Uint8_t* Ref_u8Data)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <MUART_enRecieveData+0x6>
    1166:	0f 92       	push	r0
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	9b 83       	std	Y+3, r25	; 0x03
    116e:	8a 83       	std	Y+2, r24	; 0x02
	en_uartErrStat_t local_enErrorStatus = MUART_OK;
    1170:	19 82       	std	Y+1, r1	; 0x01

	if (Ref_u8Data != NULL)
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f0       	breq	.+24     	; 0x1192 <MUART_enRecieveData+0x32>
	{
		while( !(GetBit(UCSRA_REG, RXC)) );
    117a:	eb e2       	ldi	r30, 0x2B	; 43
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	88 23       	and	r24, r24
    1182:	dc f7       	brge	.-10     	; 0x117a <MUART_enRecieveData+0x1a>
		*Ref_u8Data= UDR_REG;
    1184:	ec e2       	ldi	r30, 0x2C	; 44
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	ea 81       	ldd	r30, Y+2	; 0x02
    118c:	fb 81       	ldd	r31, Y+3	; 0x03
    118e:	80 83       	st	Z, r24
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <MUART_enRecieveData+0x36>

	}
	else
	{
		local_enErrorStatus = MUART_NOK;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_enErrorStatus;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <MUART_sendSyncString>:


void MUART_sendSyncString(Uint8_t * str, Uint8_t u8_arr_size)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <MUART_sendSyncString+0x6>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <MUART_sendSyncString+0x8>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	9b 83       	std	Y+3, r25	; 0x03
    11b2:	8a 83       	std	Y+2, r24	; 0x02
    11b4:	6c 83       	std	Y+4, r22	; 0x04
//	Uint8_t COUNTER = 0;

	for (Uint8_t count = 0; count < u8_arr_size; count++)
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <MUART_sendSyncString+0x32>
	{
		(void)MUART_enSyncSendData(str[count]);
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	9b 81       	ldd	r25, Y+3	; 0x03
    11c4:	fc 01       	movw	r30, r24
    11c6:	e2 0f       	add	r30, r18
    11c8:	f3 1f       	adc	r31, r19
    11ca:	80 81       	ld	r24, Z
    11cc:	0e 94 24 08 	call	0x1048	; 0x1048 <MUART_enSyncSendData>

void MUART_sendSyncString(Uint8_t * str, Uint8_t u8_arr_size)
{
//	Uint8_t COUNTER = 0;

	for (Uint8_t count = 0; count < u8_arr_size; count++)
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	99 81       	ldd	r25, Y+1	; 0x01
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	98 17       	cp	r25, r24
    11dc:	70 f3       	brcs	.-36     	; 0x11ba <MUART_sendSyncString+0x16>
//	while(str[COUNTER] != '\0')
//	{
//		(void)MUART_enSyncSendData(str[COUNTER]);
//		COUNTER++;
//	}
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <MUART_sendAsyncString>:




void MUART_sendAsyncString(Uint8_t * str , Uint16_t u16_arr_size)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <MUART_sendAsyncString+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <MUART_sendAsyncString+0x8>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	7c 83       	std	Y+4, r23	; 0x04
    11fe:	6b 83       	std	Y+3, r22	; 0x03
	g_u16_char_size = u16_arr_size;
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	90 93 95 00 	sts	0x0095, r25
    1208:	80 93 94 00 	sts	0x0094, r24
	strcpy(g_p_u8_string, str);
    120c:	8b eb       	ldi	r24, 0xBB	; 187
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	29 81       	ldd	r18, Y+1	; 0x01
    1212:	3a 81       	ldd	r19, Y+2	; 0x02
    1214:	b9 01       	movw	r22, r18
    1216:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <strcpy>
	UDR_REG = g_p_u8_string[g_u8_stringCounter];
    121a:	ac e2       	ldi	r26, 0x2C	; 44
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	80 91 98 00 	lds	r24, 0x0098
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	fc 01       	movw	r30, r24
    1228:	e5 54       	subi	r30, 0x45	; 69
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	8c 93       	st	X, r24
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <MUART_receiveAsyncString>:


void MUART_receiveAsyncString(Uint16_t u16_arr_size)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <MUART_receiveAsyncString+0x6>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
	g_u16_rx_char_size = u16_arr_size;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	90 93 97 00 	sts	0x0097, r25
    1254:	80 93 96 00 	sts	0x0096, r24

//	g_u8_rx_char_size = 8;

}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <MUART_receiveSTRING>:

void MUART_receiveSTRING(Uint8_t * str ,Uint8_t size )
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <MUART_receiveSTRING+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <MUART_receiveSTRING+0x8>
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	6d 83       	std	Y+5, r22	; 0x05
	Uint8_t COUNTER = 0;
    1276:	19 82       	std	Y+1, r1	; 0x01
    1278:	1c c0       	rjmp	.+56     	; 0x12b2 <MUART_receiveSTRING+0x50>
	Uint8_t Data;
	while(COUNTER < size-1)
	{
		(void)MUART_enRecieveData(&Data);
    127a:	ce 01       	movw	r24, r28
    127c:	02 96       	adiw	r24, 0x02	; 2
    127e:	0e 94 b0 08 	call	0x1160	; 0x1160 <MUART_enRecieveData>

		str[COUNTER]= Data;
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	fc 01       	movw	r30, r24
    128e:	e2 0f       	add	r30, r18
    1290:	f3 1f       	adc	r31, r19
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
		if(str[COUNTER] == ENTER_KEY)break;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	fc 01       	movw	r30, r24
    12a2:	e2 0f       	add	r30, r18
    12a4:	f3 1f       	adc	r31, r19
    12a6:	80 81       	ld	r24, Z
    12a8:	8d 30       	cpi	r24, 0x0D	; 13
    12aa:	69 f0       	breq	.+26     	; 0x12c6 <MUART_receiveSTRING+0x64>
//		(void)MUART_enSendData(str[COUNTER]);
		COUNTER++;
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	8f 5f       	subi	r24, 0xFF	; 255
    12b0:	89 83       	std	Y+1, r24	; 0x01

void MUART_receiveSTRING(Uint8_t * str ,Uint8_t size )
{
	Uint8_t COUNTER = 0;
	Uint8_t Data;
	while(COUNTER < size-1)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	28 17       	cp	r18, r24
    12c2:	39 07       	cpc	r19, r25
    12c4:	d4 f2       	brlt	.-76     	; 0x127a <MUART_receiveSTRING+0x18>
		str[COUNTER]= Data;
		if(str[COUNTER] == ENTER_KEY)break;
//		(void)MUART_enSendData(str[COUNTER]);
		COUNTER++;
	}
	str[COUNTER] = '\0';
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	fc 01       	movw	r30, r24
    12d2:	e2 0f       	add	r30, r18
    12d4:	f3 1f       	adc	r31, r19
    12d6:	10 82       	st	Z, r1
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <__vector_15>:
/********************************************************************************************************/
/*													ISR	     										*/
/********************************************************************************************************/

ISR(USART_TXC_vect)
{
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	2f 93       	push	r18
    12f4:	3f 93       	push	r19
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	af 93       	push	r26
    12fc:	bf 93       	push	r27
    12fe:	ef 93       	push	r30
    1300:	ff 93       	push	r31
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	static Uint16_t u16_size_counter = 1;


	if(u16_size_counter <= g_u16_char_size  && g_p_u8_string[u16_size_counter] != '\0' )
    130a:	20 91 75 00 	lds	r18, 0x0075
    130e:	30 91 76 00 	lds	r19, 0x0076
    1312:	80 91 94 00 	lds	r24, 0x0094
    1316:	90 91 95 00 	lds	r25, 0x0095
    131a:	82 17       	cp	r24, r18
    131c:	93 07       	cpc	r25, r19
    131e:	f8 f0       	brcs	.+62     	; 0x135e <__vector_15+0x76>
    1320:	80 91 75 00 	lds	r24, 0x0075
    1324:	90 91 76 00 	lds	r25, 0x0076
    1328:	fc 01       	movw	r30, r24
    132a:	e5 54       	subi	r30, 0x45	; 69
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	80 81       	ld	r24, Z
    1330:	88 23       	and	r24, r24
    1332:	a9 f0       	breq	.+42     	; 0x135e <__vector_15+0x76>
	{
		UDR_REG = g_p_u8_string[u16_size_counter];
    1334:	ac e2       	ldi	r26, 0x2C	; 44
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	80 91 75 00 	lds	r24, 0x0075
    133c:	90 91 76 00 	lds	r25, 0x0076
    1340:	fc 01       	movw	r30, r24
    1342:	e5 54       	subi	r30, 0x45	; 69
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	80 81       	ld	r24, Z
    1348:	8c 93       	st	X, r24
		u16_size_counter++;
    134a:	80 91 75 00 	lds	r24, 0x0075
    134e:	90 91 76 00 	lds	r25, 0x0076
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	90 93 76 00 	sts	0x0076, r25
    1358:	80 93 75 00 	sts	0x0075, r24
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <__vector_15+0x88>
	}
	else
	{
		gvu8_txComplete = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 99 00 	sts	0x0099, r24
//		ClrBit(UCSRB_REG, 6);
		u16_size_counter = 1 ;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	90 93 76 00 	sts	0x0076, r25
    136c:	80 93 75 00 	sts	0x0075, r24
//		g_u8_stringCounter = 0;

	}
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	3f 91       	pop	r19
    1382:	2f 91       	pop	r18
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <__vector_13>:


ISR(USART_RXC_vect)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	static Uint8_t counter = 0;
//	static Uint16_t g_u16_rx_char_size = 2;
	if(counter < g_u16_rx_char_size-1)
    13ac:	80 91 9b 00 	lds	r24, 0x009B
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	80 91 96 00 	lds	r24, 0x0096
    13b8:	90 91 97 00 	lds	r25, 0x0097
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	28 17       	cp	r18, r24
    13c0:	39 07       	cpc	r19, r25
    13c2:	88 f4       	brcc	.+34     	; 0x13e6 <__vector_13+0x58>
	{
		g_p_u8_rx_string_buffer[counter] = UDR_REG;
    13c4:	80 91 9b 00 	lds	r24, 0x009B
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	ec e2       	ldi	r30, 0x2C	; 44
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	20 81       	ld	r18, Z
    13d2:	fc 01       	movw	r30, r24
    13d4:	e3 56       	subi	r30, 0x63	; 99
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	20 83       	st	Z, r18
		counter++;
    13da:	80 91 9b 00 	lds	r24, 0x009B
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	80 93 9b 00 	sts	0x009B, r24
    13e4:	0d c0       	rjmp	.+26     	; 0x1400 <__vector_13+0x72>
	}
	else
	{
		g_p_u8_rx_string_buffer[counter] = '\0' ;
    13e6:	80 91 9b 00 	lds	r24, 0x009B
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	fc 01       	movw	r30, r24
    13f0:	e3 56       	subi	r30, 0x63	; 99
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	10 82       	st	Z, r1
		counter = 0;
    13f6:	10 92 9b 00 	sts	0x009B, r1
		gvu8_rxComplete = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 9a 00 	sts	0x009A, r24
	}

}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <DIO_s8SETPortDir>:
volatile Uint8_t* ddrReg[4] = { DDRA_REG, DDRB_REG, DDRC_REG, DDRD_REG };
volatile Uint8_t* pinReg[4] = { PINA_REG, PINB_REG, PINC_REG, PIND_REG };


Sint8_t DIO_s8SETPortDir(enu_port enPortCopy,  enu_dir enPortDir)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_s8SETPortDir+0x6>
    1420:	0f 92       	push	r0
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	8a 83       	std	Y+2, r24	; 0x02
    1428:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    142a:	19 82       	std	Y+1, r1	; 0x01

	if (enPortCopy < PORT_INVALID && enPortDir < DIR_INVALID)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	20 f5       	brcc	.+72     	; 0x147a <DIO_s8SETPortDir+0x60>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	08 f5       	brcc	.+66     	; 0x147a <DIO_s8SETPortDir+0x60>
	{
		if (enPortDir == INPUT)
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 23       	and	r24, r24
    143c:	69 f4       	brne	.+26     	; 0x1458 <DIO_s8SETPortDir+0x3e>
		{
			*ddrReg[enPortCopy] = 0x00;
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	fc 01       	movw	r30, r24
    144a:	e1 58       	subi	r30, 0x81	; 129
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	01 90       	ld	r0, Z+
    1450:	f0 81       	ld	r31, Z
    1452:	e0 2d       	mov	r30, r0
    1454:	10 82       	st	Z, r1
    1456:	13 c0       	rjmp	.+38     	; 0x147e <DIO_s8SETPortDir+0x64>
		}
		else if(enPortDir == OUTPUT)
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	81 f4       	brne	.+32     	; 0x147e <DIO_s8SETPortDir+0x64>
		{
			*ddrReg[enPortCopy] = 0xff;
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	fc 01       	movw	r30, r24
    146a:	e1 58       	subi	r30, 0x81	; 129
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	01 90       	ld	r0, Z+
    1470:	f0 81       	ld	r31, Z
    1472:	e0 2d       	mov	r30, r0
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	80 83       	st	Z, r24
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_s8SETPortDir+0x64>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	89 83       	std	Y+1, r24	; 0x01
	}
	return errStatus;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <DIO_s8SETPortVal>:


Sint8_t DIO_s8SETPortVal(enu_port enPortCopy,  Uint8_t u8PortVal)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_s8SETPortVal+0x6>
    1492:	0f 92       	push	r0
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    149c:	19 82       	std	Y+1, r1	; 0x01
	if (enPortCopy < PORT_INVALID)
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	84 30       	cpi	r24, 0x04	; 4
    14a2:	70 f4       	brcc	.+28     	; 0x14c0 <DIO_s8SETPortVal+0x34>
	{
		*portReg[enPortCopy] = u8PortVal;
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	fc 01       	movw	r30, r24
    14b0:	e9 58       	subi	r30, 0x89	; 137
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	01 90       	ld	r0, Z+
    14b6:	f0 81       	ld	r31, Z
    14b8:	e0 2d       	mov	r30, r0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	80 83       	st	Z, r24
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_s8SETPortVal+0x38>
	}
	else
	{
		errStatus = E_NOK;
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	89 83       	std	Y+1, r24	; 0x01
	}


	return errStatus;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <DIO_s8GETPortVal>:



Sint8_t DIO_s8GETPortVal(enu_port enPortCopy,  Uint8_t* pu8Val)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_s8GETPortVal+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <DIO_s8GETPortVal+0x8>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	8a 83       	std	Y+2, r24	; 0x02
    14e0:	7c 83       	std	Y+4, r23	; 0x04
    14e2:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    14e4:	19 82       	std	Y+1, r1	; 0x01
	if (enPortCopy < PORT_INVALID )
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	80 f4       	brcc	.+32     	; 0x150c <DIO_s8GETPortVal+0x3a>
	{
		*pu8Val = *pinReg[enPortCopy];
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	fc 01       	movw	r30, r24
    14f8:	e9 57       	subi	r30, 0x79	; 121
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	01 90       	ld	r0, Z+
    14fe:	f0 81       	ld	r31, Z
    1500:	e0 2d       	mov	r30, r0
    1502:	80 81       	ld	r24, Z
    1504:	eb 81       	ldd	r30, Y+3	; 0x03
    1506:	fc 81       	ldd	r31, Y+4	; 0x04
    1508:	80 83       	st	Z, r24
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_s8GETPortVal+0x3e>
	}
	else
	{
		errStatus = E_NOK;
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	89 83       	std	Y+1, r24	; 0x01
	}
	return errStatus;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <DIO_s8SETPinDir>:
 * 					- enPortDir {INPUT , OUTPUT}
 * Return		:   Sint8_t
 */

Sint8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <DIO_s8SETPinDir+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <DIO_s8SETPinDir+0x8>
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	8c 83       	std	Y+4, r24	; 0x04
    1530:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    1532:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	80 32       	cpi	r24, 0x20	; 32
    1538:	08 f0       	brcs	.+2      	; 0x153c <DIO_s8SETPinDir+0x1c>
    153a:	5d c0       	rjmp	.+186    	; 0x15f6 <DIO_s8SETPinDir+0xd6>
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	82 30       	cpi	r24, 0x02	; 2
    1540:	08 f0       	brcs	.+2      	; 0x1544 <DIO_s8SETPinDir+0x24>
    1542:	59 c0       	rjmp	.+178    	; 0x15f6 <DIO_s8SETPinDir+0xd6>
	{
		portID = enPinCopy/8;
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	86 95       	lsr	r24
    1548:	86 95       	lsr	r24
    154a:	86 95       	lsr	r24
    154c:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	87 70       	andi	r24, 0x07	; 7
    1552:	89 83       	std	Y+1, r24	; 0x01

		if (enPortDir == INPUT)
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	88 23       	and	r24, r24
    1558:	31 f5       	brne	.+76     	; 0x15a6 <DIO_s8SETPinDir+0x86>
		{
			ClrBit(*ddrReg[portID],pinID);
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	fc 01       	movw	r30, r24
    1566:	e1 58       	subi	r30, 0x81	; 129
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	a0 81       	ld	r26, Z
    156c:	b1 81       	ldd	r27, Z+1	; 0x01
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	fc 01       	movw	r30, r24
    157a:	e1 58       	subi	r30, 0x81	; 129
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	01 90       	ld	r0, Z+
    1580:	f0 81       	ld	r31, Z
    1582:	e0 2d       	mov	r30, r0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_s8SETPinDir+0x7a>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_s8SETPinDir+0x76>
    159e:	80 95       	com	r24
    15a0:	84 23       	and	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	2a c0       	rjmp	.+84     	; 0x15fa <DIO_s8SETPinDir+0xda>
		}
		else if(enPortDir == OUTPUT)
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	39 f5       	brne	.+78     	; 0x15fa <DIO_s8SETPinDir+0xda>
		{
			SetBit(*ddrReg[portID],pinID);
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	fc 01       	movw	r30, r24
    15b8:	e1 58       	subi	r30, 0x81	; 129
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	a0 81       	ld	r26, Z
    15be:	b1 81       	ldd	r27, Z+1	; 0x01
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	fc 01       	movw	r30, r24
    15cc:	e1 58       	subi	r30, 0x81	; 129
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	01 90       	ld	r0, Z+
    15d2:	f0 81       	ld	r31, Z
    15d4:	e0 2d       	mov	r30, r0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_s8SETPinDir+0xcc>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_s8SETPinDir+0xc8>
    15f0:	84 2b       	or	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_s8SETPinDir+0xda>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <DIO_s8SETPinVal>:
 * 					- enPinCopy {DIO_PINA_0...., DIO_PIND_7}
 * 					- enPortDir {HIGH , LOW}
 * Return		:   Sint8_t
 */
Sint8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <DIO_s8SETPinVal+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <DIO_s8SETPinVal+0x8>
    1614:	0f 92       	push	r0
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	8c 83       	std	Y+4, r24	; 0x04
    161c:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    161e:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	80 32       	cpi	r24, 0x20	; 32
    1624:	08 f0       	brcs	.+2      	; 0x1628 <DIO_s8SETPinVal+0x1c>
    1626:	5d c0       	rjmp	.+186    	; 0x16e2 <DIO_s8SETPinVal+0xd6>
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	08 f0       	brcs	.+2      	; 0x1630 <DIO_s8SETPinVal+0x24>
    162e:	59 c0       	rjmp	.+178    	; 0x16e2 <DIO_s8SETPinVal+0xd6>
	{
		portID = enPinCopy/8;
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	86 95       	lsr	r24
    1634:	86 95       	lsr	r24
    1636:	86 95       	lsr	r24
    1638:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	87 70       	andi	r24, 0x07	; 7
    163e:	89 83       	std	Y+1, r24	; 0x01

		if (enPortVal == LOW)
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	88 23       	and	r24, r24
    1644:	31 f5       	brne	.+76     	; 0x1692 <DIO_s8SETPinVal+0x86>
		{
			ClrBit(*portReg[portID],pinID);
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	fc 01       	movw	r30, r24
    1652:	e9 58       	subi	r30, 0x89	; 137
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	a0 81       	ld	r26, Z
    1658:	b1 81       	ldd	r27, Z+1	; 0x01
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	fc 01       	movw	r30, r24
    1666:	e9 58       	subi	r30, 0x89	; 137
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	01 90       	ld	r0, Z+
    166c:	f0 81       	ld	r31, Z
    166e:	e0 2d       	mov	r30, r0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_s8SETPinVal+0x7a>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_s8SETPinVal+0x76>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	2a c0       	rjmp	.+84     	; 0x16e6 <DIO_s8SETPinVal+0xda>
		}
		else if(enPortVal == HIGH)
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	39 f5       	brne	.+78     	; 0x16e6 <DIO_s8SETPinVal+0xda>
		{
			SetBit(*portReg[portID],pinID);
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	fc 01       	movw	r30, r24
    16a4:	e9 58       	subi	r30, 0x89	; 137
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	a0 81       	ld	r26, Z
    16aa:	b1 81       	ldd	r27, Z+1	; 0x01
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	fc 01       	movw	r30, r24
    16b8:	e9 58       	subi	r30, 0x89	; 137
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	01 90       	ld	r0, Z+
    16be:	f0 81       	ld	r31, Z
    16c0:	e0 2d       	mov	r30, r0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_s8SETPinVal+0xcc>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_s8SETPinVal+0xc8>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_s8SETPinVal+0xda>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <DIO_s8TOGPinVal>:


Sint8_t DIO_s8TOGPinVal (enu_pin enPinCopy)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <DIO_s8TOGPinVal+0x6>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <DIO_s8TOGPinVal+0x8>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	8c 83       	std	Y+4, r24	; 0x04
	Sint8_t errStatus = E_OK;
    1706:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID)
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	80 32       	cpi	r24, 0x20	; 32
    170c:	68 f5       	brcc	.+90     	; 0x1768 <DIO_s8TOGPinVal+0x70>
	{
		portID = enPinCopy/8;
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	86 95       	lsr	r24
    1712:	86 95       	lsr	r24
    1714:	86 95       	lsr	r24
    1716:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	87 70       	andi	r24, 0x07	; 7
    171c:	89 83       	std	Y+1, r24	; 0x01

		TogBit(*portReg[portID],pinID);
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	fc 01       	movw	r30, r24
    172a:	e9 58       	subi	r30, 0x89	; 137
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	a0 81       	ld	r26, Z
    1730:	b1 81       	ldd	r27, Z+1	; 0x01
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	fc 01       	movw	r30, r24
    173e:	e9 58       	subi	r30, 0x89	; 137
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	01 90       	ld	r0, Z+
    1744:	f0 81       	ld	r31, Z
    1746:	e0 2d       	mov	r30, r0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <DIO_s8TOGPinVal+0x66>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <DIO_s8TOGPinVal+0x62>
    1762:	84 27       	eor	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_s8TOGPinVal+0x74>
	}
	else
	{
		errStatus = E_NOK;
    1768:	8f ef       	ldi	r24, 0xFF	; 255
    176a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    176c:	8b 81       	ldd	r24, Y+3	; 0x03

}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <DIO_s8GETPinVal>:
 * 					- enPinCopy {DIO_PINA_0...., DIO_PIND_7}
 * 					- pu8Val address of variable that u want to save value on it
 * Return		:   Sint8_t
 */
Sint8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uint8_t* pu8Val)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <DIO_s8GETPinVal+0x6>
    1782:	00 d0       	rcall	.+0      	; 0x1784 <DIO_s8GETPinVal+0x8>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <DIO_s8GETPinVal+0xa>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	8c 83       	std	Y+4, r24	; 0x04
    178c:	7e 83       	std	Y+6, r23	; 0x06
    178e:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    1790:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;
	if (enPinCopy < PIN_INVALID)
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	80 32       	cpi	r24, 0x20	; 32
    1796:	28 f5       	brcc	.+74     	; 0x17e2 <DIO_s8GETPinVal+0x66>
	{
		portID = enPinCopy/8;
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	86 95       	lsr	r24
    179c:	86 95       	lsr	r24
    179e:	86 95       	lsr	r24
    17a0:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	87 70       	andi	r24, 0x07	; 7
    17a6:	89 83       	std	Y+1, r24	; 0x01

		*pu8Val = GetBit(*pinReg[portID], pinID);
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	fc 01       	movw	r30, r24
    17b4:	e9 57       	subi	r30, 0x79	; 121
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	01 90       	ld	r0, Z+
    17ba:	f0 81       	ld	r31, Z
    17bc:	e0 2d       	mov	r30, r0
    17be:	80 81       	ld	r24, Z
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a9 01       	movw	r20, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_s8GETPinVal+0x56>
    17ce:	55 95       	asr	r21
    17d0:	47 95       	ror	r20
    17d2:	8a 95       	dec	r24
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_s8GETPinVal+0x52>
    17d6:	ca 01       	movw	r24, r20
    17d8:	81 70       	andi	r24, 0x01	; 1
    17da:	ed 81       	ldd	r30, Y+5	; 0x05
    17dc:	fe 81       	ldd	r31, Y+6	; 0x06
    17de:	80 83       	st	Z, r24
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <DIO_s8GETPinVal+0x6a>

	}
	else
	{
		errStatus = E_NOK;
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    17e8:	26 96       	adiw	r28, 0x06	; 6
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <HLed_Init>:
#include "../../Common/Bit_Math.h"
#include "led.h"


enu_ledError_t HLed_Init(enu_pin en_pinNum)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <HLed_Init+0x6>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinNum < PIN_INVALID )
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	80 32       	cpi	r24, 0x20	; 32
    180e:	28 f4       	brcc	.+10     	; 0x181a <HLed_Init+0x20>
	{
		DIO_s8SETPinDir(en_pinNum, OUTPUT);
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_s8SETPinDir>
    1818:	01 c0       	rjmp	.+2      	; 0x181c <HLed_Init+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    181a:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    181c:	89 81       	ldd	r24, Y+1	; 0x01

}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <HLed_on>:

enu_ledError_t HLed_on(enu_pin en_pinx)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <HLed_on+0x6>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	80 32       	cpi	r24, 0x20	; 32
    183c:	28 f4       	brcc	.+10     	; 0x1848 <HLed_on+0x20>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_s8SETPinVal>
    1846:	01 c0       	rjmp	.+2      	; 0x184a <HLed_on+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    1848:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    184a:	89 81       	ldd	r24, Y+1	; 0x01

}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <HLed_off>:



enu_ledError_t HLed_off(enu_pin en_pinx)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <HLed_off+0x6>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	80 32       	cpi	r24, 0x20	; 32
    186a:	28 f4       	brcc	.+10     	; 0x1876 <HLed_off+0x20>
	{
		DIO_s8SETPinVal(en_pinx, LOW);
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_s8SETPinVal>
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <HLed_off+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    1876:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    1878:	89 81       	ldd	r24, Y+1	; 0x01

}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <HLed_toggle>:


enu_ledError_t HLed_toggle(enu_pin en_pinx)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <HLed_toggle+0x6>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	80 32       	cpi	r24, 0x20	; 32
    1898:	20 f4       	brcc	.+8      	; 0x18a2 <HLed_toggle+0x1e>
	{
		DIO_s8TOGPinVal(en_pinx);
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_s8TOGPinVal>
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <HLed_toggle+0x20>

	}
	else
	{
		errorStatus = LED_NOK;
    18a2:	19 82       	std	Y+1, r1	; 0x01
	}

	return errorStatus;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01

}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <HUART_enInit>:

/********************************************************************************************************
 * 											Function Implmentation
 ********************************************************************************************************/
en_huartErrStat_t HUART_enInit(Uint32_t copy_u32BaudRateH,en_huart_tx_rx_sel_t en_huart_tx_rx_sel)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	28 97       	sbiw	r28, 0x08	; 8
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	6a 83       	std	Y+2, r22	; 0x02
    18c6:	7b 83       	std	Y+3, r23	; 0x03
    18c8:	8c 83       	std	Y+4, r24	; 0x04
    18ca:	9d 83       	std	Y+5, r25	; 0x05
    18cc:	4e 83       	std	Y+6, r20	; 0x06

	en_huartErrStat_t local_enErrorStatus = HUART_OK;
    18ce:	19 82       	std	Y+1, r1	; 0x01

	local_enErrorStatus = MUART_enInit(copy_u32BaudRateH);
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	ac 81       	ldd	r26, Y+4	; 0x04
    18d6:	bd 81       	ldd	r27, Y+5	; 0x05
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 f5 06 	call	0xdea	; 0xdea <MUART_enInit>
    18e0:	89 83       	std	Y+1, r24	; 0x01

	if (en_huart_tx_rx_sel < HUART_STATE_INVALID)
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	e0 f4       	brcc	.+56     	; 0x1920 <HUART_enInit+0x70>
	{
		switch(en_huart_tx_rx_sel)
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	38 87       	std	Y+8, r19	; 0x08
    18f0:	2f 83       	std	Y+7, r18	; 0x07
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	98 85       	ldd	r25, Y+8	; 0x08
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	91 05       	cpc	r25, r1
    18fa:	61 f0       	breq	.+24     	; 0x1914 <HUART_enInit+0x64>
    18fc:	2f 81       	ldd	r18, Y+7	; 0x07
    18fe:	38 85       	ldd	r19, Y+8	; 0x08
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	51 f0       	breq	.+20     	; 0x191a <HUART_enInit+0x6a>
    1906:	8f 81       	ldd	r24, Y+7	; 0x07
    1908:	98 85       	ldd	r25, Y+8	; 0x08
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	59 f4       	brne	.+22     	; 0x1924 <HUART_enInit+0x74>
		{
			case HUART_TX 			:	MUART_en_TX_Enable(); 		break;
    190e:	0e 94 c2 07 	call	0xf84	; 0xf84 <MUART_en_TX_Enable>
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <HUART_enInit+0x74>
			case HUART_RX			:	MUART_en_RX_Enable(); 		break;
    1914:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <MUART_en_RX_Enable>
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <HUART_enInit+0x74>
			case HUART_TX_RX		:	MUART_en_TX_RX_Enable(); 	break;
    191a:	0e 94 fa 07 	call	0xff4	; 0xff4 <MUART_en_TX_RX_Enable>
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <HUART_enInit+0x74>
			default					: break;
		}
	}
	else
	{
		local_enErrorStatus = HUART_NOK;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
	}


	return local_enErrorStatus;
    1924:	89 81       	ldd	r24, Y+1	; 0x01
}
    1926:	28 96       	adiw	r28, 0x08	; 8
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <HUART_enEnableInterrupt>:


en_huartErrStat_t HUART_enEnableInterrupt(en_huart_tx_rx_sel_t en_huart_tx_rx_sel)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <HUART_enEnableInterrupt+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <HUART_enEnableInterrupt+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	8a 83       	std	Y+2, r24	; 0x02
	en_huartErrStat_t local_enErrorStatus = HUART_OK;
    1946:	19 82       	std	Y+1, r1	; 0x01

	if (en_huart_tx_rx_sel < HUART_STATE_INVALID)
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	83 30       	cpi	r24, 0x03	; 3
    194c:	48 f5       	brcc	.+82     	; 0x19a0 <HUART_enEnableInterrupt+0x68>
	{
		switch(en_huart_tx_rx_sel)
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	3c 83       	std	Y+4, r19	; 0x04
    1956:	2b 83       	std	Y+3, r18	; 0x03
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	91 05       	cpc	r25, r1
    1960:	69 f0       	breq	.+26     	; 0x197c <HUART_enEnableInterrupt+0x44>
    1962:	2b 81       	ldd	r18, Y+3	; 0x03
    1964:	3c 81       	ldd	r19, Y+4	; 0x04
    1966:	22 30       	cpi	r18, 0x02	; 2
    1968:	31 05       	cpc	r19, r1
    196a:	61 f0       	breq	.+24     	; 0x1984 <HUART_enEnableInterrupt+0x4c>
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	71 f4       	brne	.+28     	; 0x1990 <HUART_enEnableInterrupt+0x58>
		{
			case HUART_TX 			:	MUART_enEnableInterrupt(MUART_TX_INTERRUPT);		break;
    1974:	86 e0       	ldi	r24, 0x06	; 6
    1976:	0e 94 63 08 	call	0x10c6	; 0x10c6 <MUART_enEnableInterrupt>
    197a:	0a c0       	rjmp	.+20     	; 0x1990 <HUART_enEnableInterrupt+0x58>
			case HUART_RX			:	MUART_enEnableInterrupt(MUART_RX_INTERRUPT); 		break;
    197c:	87 e0       	ldi	r24, 0x07	; 7
    197e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <MUART_enEnableInterrupt>
    1982:	06 c0       	rjmp	.+12     	; 0x1990 <HUART_enEnableInterrupt+0x58>
			case HUART_TX_RX		:	MUART_enEnableInterrupt(MUART_TX_INTERRUPT); MUART_enEnableInterrupt(MUART_RX_INTERRUPT);	break;
    1984:	86 e0       	ldi	r24, 0x06	; 6
    1986:	0e 94 63 08 	call	0x10c6	; 0x10c6 <MUART_enEnableInterrupt>
    198a:	87 e0       	ldi	r24, 0x07	; 7
    198c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <MUART_enEnableInterrupt>
			default					: break;
		}
		GLI();
    1990:	af e5       	ldi	r26, 0x5F	; 95
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ef e5       	ldi	r30, 0x5F	; 95
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	80 68       	ori	r24, 0x80	; 128
    199c:	8c 93       	st	X, r24
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <HUART_enEnableInterrupt+0x6c>
	}
	else
	{
		local_enErrorStatus = HUART_NOK;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	89 83       	std	Y+1, r24	; 0x01
	}


	return local_enErrorStatus;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01

}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <HUART_enDeInit>:



en_huartErrStat_t HUART_enDeInit(en_huart_tx_rx_sel_t en_huart_tx_rx_sel)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <HUART_enDeInit+0x6>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <HUART_enDeInit+0x8>
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	8a 83       	std	Y+2, r24	; 0x02
	en_huartErrStat_t local_enErrorStatus = HUART_OK;
    19c2:	19 82       	std	Y+1, r1	; 0x01

	if (en_huart_tx_rx_sel < HUART_STATE_INVALID)
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	83 30       	cpi	r24, 0x03	; 3
    19c8:	e0 f4       	brcc	.+56     	; 0x1a02 <HUART_enDeInit+0x4e>
	{
		switch(en_huart_tx_rx_sel)
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	3c 83       	std	Y+4, r19	; 0x04
    19d2:	2b 83       	std	Y+3, r18	; 0x03
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	91 05       	cpc	r25, r1
    19dc:	61 f0       	breq	.+24     	; 0x19f6 <HUART_enDeInit+0x42>
    19de:	2b 81       	ldd	r18, Y+3	; 0x03
    19e0:	3c 81       	ldd	r19, Y+4	; 0x04
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	51 f0       	breq	.+20     	; 0x19fc <HUART_enDeInit+0x48>
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	59 f4       	brne	.+22     	; 0x1a06 <HUART_enDeInit+0x52>
		{
			case HUART_TX 			:	MUART_en_TX_Disable(); 		break;
    19f0:	0e 94 de 07 	call	0xfbc	; 0xfbc <MUART_en_TX_Disable>
    19f4:	08 c0       	rjmp	.+16     	; 0x1a06 <HUART_enDeInit+0x52>
			case HUART_RX			:	MUART_en_RX_Disable(); 		break;
    19f6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <MUART_en_RX_Disable>
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <HUART_enDeInit+0x52>
			case HUART_TX_RX		:	MUART_en_TX_RX_Disable(); 	break;
    19fc:	0e 94 0f 08 	call	0x101e	; 0x101e <MUART_en_TX_RX_Disable>
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <HUART_enDeInit+0x52>
			default					: break;
		}
	}
	else
	{
		local_enErrorStatus = HUART_NOK;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_enErrorStatus;
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <HUART_enSyncSendData>:



en_huartErrStat_t HUART_enSyncSendData(Uint8_t Copy_u8DataH)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <HUART_enSyncSendData+0x6>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	8a 83       	std	Y+2, r24	; 0x02
	en_huartErrStat_t local_enErrorStatus = HUART_OK;
    1a22:	19 82       	std	Y+1, r1	; 0x01

	(void) MUART_enSyncSendData(Copy_u8DataH);
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	0e 94 24 08 	call	0x1048	; 0x1048 <MUART_enSyncSendData>

	return local_enErrorStatus;
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <HUART_enAsyncSendData>:



en_huartErrStat_t HUART_enAsyncSendData(Uint8_t Copy_u8DataH)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <HUART_enAsyncSendData+0x6>
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	8a 83       	std	Y+2, r24	; 0x02
	en_huartErrStat_t errorState = HUART_OK;
    1a42:	19 82       	std	Y+1, r1	; 0x01

	(void) MUART_enAsyncSendData(Copy_u8DataH);
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	0e 94 4e 08 	call	0x109c	; 0x109c <MUART_enAsyncSendData>

	return errorState;
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <HUART_enRecieveData>:



en_huartErrStat_t HUART_enRecieveData(Uint8_t* Ref_u8DataH)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <HUART_enRecieveData+0x6>
    1a5c:	0f 92       	push	r0
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	9b 83       	std	Y+3, r25	; 0x03
    1a64:	8a 83       	std	Y+2, r24	; 0x02
	en_huartErrStat_t local_enErrorStatus = HUART_OK;
    1a66:	19 82       	std	Y+1, r1	; 0x01

	local_enErrorStatus = MUART_enRecieveData(Ref_u8DataH);
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6c:	0e 94 b0 08 	call	0x1160	; 0x1160 <MUART_enRecieveData>
    1a70:	89 83       	std	Y+1, r24	; 0x01

	return local_enErrorStatus;
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <HUART_sendSyncString>:


void HUART_sendSyncString(Uint8_t * Hstr, Uint8_t u8_arr_size)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <HUART_sendSyncString+0x6>
    1a86:	0f 92       	push	r0
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	6b 83       	std	Y+3, r22	; 0x03
	MUART_sendSyncString(Hstr, u8_arr_size);
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	6b 81       	ldd	r22, Y+3	; 0x03
    1a98:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <MUART_sendSyncString>
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <HUART_sendAsyncString>:

void HUART_sendAsyncString(Uint8_t * Hstr, Uint16_t u16_arr_size)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <HUART_sendAsyncString+0x6>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <HUART_sendAsyncString+0x8>
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	7c 83       	std	Y+4, r23	; 0x04
    1aba:	6b 83       	std	Y+3, r22	; 0x03
	MUART_sendAsyncString(Hstr, u16_arr_size);
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	b9 01       	movw	r22, r18
    1ac6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <MUART_sendAsyncString>

	(void) MUART_enEnableInterrupt(MUART_TX_INTERRUPT);
    1aca:	86 e0       	ldi	r24, 0x06	; 6
    1acc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <MUART_enEnableInterrupt>
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <HUART_receiveAsyncString>:


void HUART_receiveAsyncString(Uint16_t u16_arr_size)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <HUART_receiveAsyncString+0x6>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
//	g_s8_rx_char_size = s8_arr_size;

	MUART_receiveAsyncString(u16_arr_size);
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	0e 94 1f 09 	call	0x123e	; 0x123e <MUART_receiveAsyncString>

}
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <HUART_receiveSTRING>:

void HUART_receiveSTRING(Uint8_t * Hstr ,Uint8_t Hsize )
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <HUART_receiveSTRING+0x6>
    1b04:	0f 92       	push	r0
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	6b 83       	std	Y+3, r22	; 0x03
	MUART_receiveSTRING(Hstr ,Hsize );
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	6b 81       	ldd	r22, Y+3	; 0x03
    1b16:	0e 94 31 09 	call	0x1262	; 0x1262 <MUART_receiveSTRING>
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <HButton_Init>:
* FUNCTION			: HButton_Init
* DESCRIPTION		: Initialize specified pin as input and pull up
* RETURN			: enu_buttonError_t {BUTTON_NOK, BUTTON_OK}
*/
enu_buttonError_t HButton_Init(enu_pin en_pinx)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <HButton_Init+0x6>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	8a 83       	std	Y+2, r24	; 0x02
	enu_buttonError_t errorStatus = BUTTON_OK;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	80 32       	cpi	r24, 0x20	; 32
    1b3a:	48 f4       	brcc	.+18     	; 0x1b4e <HButton_Init+0x28>
	{
		DIO_s8SETPinDir(en_pinx, INPUT);
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_s8SETPinDir>
		DIO_s8SETPinVal(en_pinx, HIGH);
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_s8SETPinVal>
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <HButton_Init+0x2c>
	}
	else
	{
		errorStatus = BUTTON_OK;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <HButton_ExtIntInit>:
* FUNCTION			: HButton_ExtIntInit
* DESCRIPTION		: Initialize specified as pull up for external interrupt
* RETURN			: enu_buttonError_t {BUTTON_NOK, BUTTON_OK}
*/
enu_buttonError_t HButton_ExtIntInit(enu_pin en_pinx)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <HButton_ExtIntInit+0x6>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8a 83       	std	Y+2, r24	; 0x02
	enu_buttonError_t errorStatus = BUTTON_OK;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	80 32       	cpi	r24, 0x20	; 32
    1b72:	28 f4       	brcc	.+10     	; 0x1b7e <HButton_ExtIntInit+0x20>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_s8SETPinVal>
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <HButton_ExtIntInit+0x24>
	}
	else
	{
		errorStatus = BUTTON_OK;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <HButton_getPinVal>:
* FUNCTION			: HButton_getPinVal
* DESCRIPTION		: Get pin status if it is high or low
* RETURN			: enu_buttonError_t {BUTTON_NOK, BUTTON_OK}
*/
enu_buttonError_t HButton_getPinVal(enu_pin en_pinx,  Uint8_t* pu8_refVal )
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <HButton_getPinVal+0x6>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <HButton_getPinVal+0x8>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	8a 83       	std	Y+2, r24	; 0x02
    1b9c:	7c 83       	std	Y+4, r23	; 0x04
    1b9e:	6b 83       	std	Y+3, r22	; 0x03
	enu_buttonError_t errorStatus = BUTTON_OK;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID && pu8_refVal != NULL )
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	80 32       	cpi	r24, 0x20	; 32
    1ba8:	58 f4       	brcc	.+22     	; 0x1bc0 <HButton_getPinVal+0x32>
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	39 f0       	breq	.+14     	; 0x1bc0 <HButton_getPinVal+0x32>
	{
		(void)DIO_s8GETPinVal(en_pinx, pu8_refVal);
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	b9 01       	movw	r22, r18
    1bba:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_s8GETPinVal>
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <HButton_getPinVal+0x36>
	}
	else
	{
		errorStatus = BUTTON_OK;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01

}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <APP_vidInit>:
extern str_bcm_instance_t app_str_bcm_instance ;

Uint8_t var = 0;

void APP_vidInit(void)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
	HLed_Init(DIO_PIND_6);
    1bdc:	8e e1       	ldi	r24, 0x1E	; 30
    1bde:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <HLed_Init>
	HLed_Init(DIO_PIND_7);
    1be2:	8f e1       	ldi	r24, 0x1F	; 31
    1be4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <HLed_Init>


	(void) bcm_init(&app_str_bcm_instance);
    1be8:	8f e6       	ldi	r24, 0x6F	; 111
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 a3 05 	call	0xb46	; 0xb46 <bcm_init>
	(void) bcm_send_n(&app_str_bcm_instance, "Bassel", 9);
    1bf0:	8f e6       	ldi	r24, 0x6F	; 111
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	20 e6       	ldi	r18, 0x60	; 96
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	b9 01       	movw	r22, r18
    1bfa:	49 e0       	ldi	r20, 0x09	; 9
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	0e 94 21 06 	call	0xc42	; 0xc42 <bcm_send_n>

}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <APP_vidStart>:


void APP_vidStart(void)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	2e 97       	sbiw	r28, 0x0e	; 14
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	aa e7       	ldi	r26, 0x7A	; 122
    1c22:	b4 e4       	ldi	r27, 0x44	; 68
    1c24:	8b 87       	std	Y+11, r24	; 0x0b
    1c26:	9c 87       	std	Y+12, r25	; 0x0c
    1c28:	ad 87       	std	Y+13, r26	; 0x0d
    1c2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4a ef       	ldi	r20, 0xFA	; 250
    1c3a:	54 e4       	ldi	r21, 0x44	; 68
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8f 83       	std	Y+7, r24	; 0x07
    1c46:	98 87       	std	Y+8, r25	; 0x08
    1c48:	a9 87       	std	Y+9, r26	; 0x09
    1c4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4e:	78 85       	ldd	r23, Y+8	; 0x08
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c60:	88 23       	and	r24, r24
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <APP_vidStart+0x66>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	3f c0       	rjmp	.+126    	; 0x1cec <APP_vidStart+0xe4>
	else if (__tmp > 65535)
    1c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c70:	78 85       	ldd	r23, Y+8	; 0x08
    1c72:	89 85       	ldd	r24, Y+9	; 0x09
    1c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
    1c7a:	4f e7       	ldi	r20, 0x7F	; 127
    1c7c:	57 e4       	ldi	r21, 0x47	; 71
    1c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c82:	18 16       	cp	r1, r24
    1c84:	4c f5       	brge	.+82     	; 0x1cd8 <APP_vidStart+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <APP_vidStart+0xc6>
    1cb0:	88 ec       	ldi	r24, 0xC8	; 200
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <APP_vidStart+0xb4>
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	69 f7       	brne	.-38     	; 0x1cb0 <APP_vidStart+0xa8>
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <APP_vidStart+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cda:	78 85       	ldd	r23, Y+8	; 0x08
    1cdc:	89 85       	ldd	r24, Y+9	; 0x09
    1cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <APP_vidStart+0xf0>
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	(void) bcm_dispatcher(&app_str_bcm_instance);
    1d00:	8f e6       	ldi	r24, 0x6F	; 111
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 4d 06 	call	0xc9a	; 0xc9a <bcm_dispatcher>


}
    1d08:	2e 96       	adiw	r28, 0x0e	; 14
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <main>:

#include "App/app.h"


int main(void)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
	APP_vidInit();
    1d22:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <APP_vidInit>


	while (1)
	{
		APP_vidStart();
    1d26:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <APP_vidStart>
    1d2a:	fd cf       	rjmp	.-6      	; 0x1d26 <main+0xc>

00001d2c <__udivmodsi4>:
    1d2c:	a1 e2       	ldi	r26, 0x21	; 33
    1d2e:	1a 2e       	mov	r1, r26
    1d30:	aa 1b       	sub	r26, r26
    1d32:	bb 1b       	sub	r27, r27
    1d34:	fd 01       	movw	r30, r26
    1d36:	0d c0       	rjmp	.+26     	; 0x1d52 <__udivmodsi4_ep>

00001d38 <__udivmodsi4_loop>:
    1d38:	aa 1f       	adc	r26, r26
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	ee 1f       	adc	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	a2 17       	cp	r26, r18
    1d42:	b3 07       	cpc	r27, r19
    1d44:	e4 07       	cpc	r30, r20
    1d46:	f5 07       	cpc	r31, r21
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <__udivmodsi4_ep>
    1d4a:	a2 1b       	sub	r26, r18
    1d4c:	b3 0b       	sbc	r27, r19
    1d4e:	e4 0b       	sbc	r30, r20
    1d50:	f5 0b       	sbc	r31, r21

00001d52 <__udivmodsi4_ep>:
    1d52:	66 1f       	adc	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	1a 94       	dec	r1
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <__udivmodsi4_loop>
    1d5e:	60 95       	com	r22
    1d60:	70 95       	com	r23
    1d62:	80 95       	com	r24
    1d64:	90 95       	com	r25
    1d66:	9b 01       	movw	r18, r22
    1d68:	ac 01       	movw	r20, r24
    1d6a:	bd 01       	movw	r22, r26
    1d6c:	cf 01       	movw	r24, r30
    1d6e:	08 95       	ret

00001d70 <__prologue_saves__>:
    1d70:	2f 92       	push	r2
    1d72:	3f 92       	push	r3
    1d74:	4f 92       	push	r4
    1d76:	5f 92       	push	r5
    1d78:	6f 92       	push	r6
    1d7a:	7f 92       	push	r7
    1d7c:	8f 92       	push	r8
    1d7e:	9f 92       	push	r9
    1d80:	af 92       	push	r10
    1d82:	bf 92       	push	r11
    1d84:	cf 92       	push	r12
    1d86:	df 92       	push	r13
    1d88:	ef 92       	push	r14
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	ca 1b       	sub	r28, r26
    1d9a:	db 0b       	sbc	r29, r27
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	09 94       	ijmp

00001da8 <__epilogue_restores__>:
    1da8:	2a 88       	ldd	r2, Y+18	; 0x12
    1daa:	39 88       	ldd	r3, Y+17	; 0x11
    1dac:	48 88       	ldd	r4, Y+16	; 0x10
    1dae:	5f 84       	ldd	r5, Y+15	; 0x0f
    1db0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1db2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1db4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1db6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1db8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dba:	b9 84       	ldd	r11, Y+9	; 0x09
    1dbc:	c8 84       	ldd	r12, Y+8	; 0x08
    1dbe:	df 80       	ldd	r13, Y+7	; 0x07
    1dc0:	ee 80       	ldd	r14, Y+6	; 0x06
    1dc2:	fd 80       	ldd	r15, Y+5	; 0x05
    1dc4:	0c 81       	ldd	r16, Y+4	; 0x04
    1dc6:	1b 81       	ldd	r17, Y+3	; 0x03
    1dc8:	aa 81       	ldd	r26, Y+2	; 0x02
    1dca:	b9 81       	ldd	r27, Y+1	; 0x01
    1dcc:	ce 0f       	add	r28, r30
    1dce:	d1 1d       	adc	r29, r1
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	ed 01       	movw	r28, r26
    1ddc:	08 95       	ret

00001dde <strcpy>:
    1dde:	fb 01       	movw	r30, r22
    1de0:	dc 01       	movw	r26, r24
    1de2:	01 90       	ld	r0, Z+
    1de4:	0d 92       	st	X+, r0
    1de6:	00 20       	and	r0, r0
    1de8:	e1 f7       	brne	.-8      	; 0x1de2 <strcpy+0x4>
    1dea:	08 95       	ret

00001dec <_exit>:
    1dec:	f8 94       	cli

00001dee <__stop_program>:
    1dee:	ff cf       	rjmp	.-2      	; 0x1dee <__stop_program>
